type ConfigData = record {
  vocab_size : nat64;
  rotary_dim : nat64;
  n_layer : nat64;
  layer_norm_epsilon : text;
  tie_word_embeddings : bool;
  pad_vocab_size_multiple : nat64;
  n_positions : nat64;
  n_inner : opt nat64;
  activation_function : text;
  n_embd : nat64;
  n_head : nat64;
};
type LLM = record {
  weight : opt vec nat8;
  model_name : text;
  tokenizer : opt vec nat8;
  config : opt ConfigData;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : nat32; Err : text };
type Result_2 = variant { Ok : vec nat8; Err : text };
service : {
  commit_batch : (text, text, vec nat32) -> (Result);
  create_chunk : (text, text, vec nat8, nat32) -> (Result_1);
  exist_llm : (text) -> (bool) query;
  exist_llm_content : (text, text) -> (bool) query;
  extend_llm_tokenizer : (text, vec nat8) -> (Result_2);
  extend_llm_weight : (text, vec nat8) -> (Result_2);
  get_heap_data : () -> (vec nat8) query;
  get_llm_ditaile : (text) -> (
      opt record { text; opt nat64; opt nat64; opt ConfigData },
    ) query;
  get_llm_keys : () -> (vec text) query;
  greet : (text) -> (text) query;
  init_llm_config : (text, ConfigData) -> (opt text);
  insert_llm : (text, LLM) -> (opt text);
  remove_tmp_data : (text, text) -> (text, vec bool);
  set_heap_data : (vec nat8) -> ();
  update_llm_config : (text, ConfigData) -> (opt text);
  update_llm_tokenizer : (text, opt vec nat8) -> (opt text);
  update_llm_weight : (text, opt vec nat8) -> (opt text);
}
